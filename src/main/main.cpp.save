/*
 * DBC to SQL Converter
 * Copyright (C) 2009  David Vas, Anubisss
 * <http://code.google.com/p/dbctosql/>

 * Updated by Dagfinn (Uberdaff) in 2012.

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <cstring>
#include <cstdio>

#include "common/common.h"
#include "dbc/dbc.h"
#include "structs/spell.h"
#include "structs/spellitemenchantment.h"
#include "structs/achievement.h"
#include "structs/achievement_category.h"
#include "structs/achievement_criteria.h"
#include "common/progressbar.h"

#define SQL_INSERTS_PER_QUERY   300

#define SLASH_BUFFER            2000

bool check_dbc();
void dump_sql(const std::string dbc_translation[][2], DBCFileLoader *DBCFile,const std::string sql_filename, const std::string table_name);
bool LoadCheckDump(const std::string dbc_translation[][2], const int columns, const int rows, const std::string dbc_filename, const std::string sql_filename, const std::string table_name);

//DBCFileLoader DBCSpell;

int main(int argc, char *argv[])
{
    bool wasRun=false;
    if(argc > 1) // To add support for more dbc files you need to add an else if statement under. And you'll need to create a .h file in the structs folder.
    {
        if(!strcmp(argv[1], "Spell.dbc")|!strcmp(argv[1], "3.3.5a"))
            wasRun=LoadCheckDump(spell_definition,SPELL_DBC_COLUMN_NUMS, SPELL_DBC_ROWS_NUMS, SPELL_DBC, SPELL_SQL, SPELL_TABLE);
        if(!strcmp(argv[1], "SpellItemEnchantment.dbc")|!strcmp(argv[1], "3.3.5a"))
            wasRun=LoadCheckDump(spellItemEnch_definition,SPELLITEMENCH_DBC_COLUMN_NUMS, SPELLITEMENCH_DBC_ROWS_NUMS, SPELLITEMENCH_DBC, SPELLITEMENCH_SQL, SPELLITEMENCH_TABLE);
        if(!wasRun)
            std::cout << "File not supported or unknown command. Type " << argv[0] << " for more info and supported files." << std::endl;
    }

    if(argc == 1) // If you add support for more dbc files. Please remember to add it to the list under.
    {
        std::cout << "*** DBCtoSQL v" << DBCTOSQL_VER << "*** <" << DBCTOSQL_WEB << ">" << std::endl;
        std::cout << "Usage: " << argv[0] << " <file name> <client version if needed> to convert one supported dbc file to sql" << std::endl;
        std::cout << "Usage: " << argv[0] << " <client version> to convert all supported dbc file for that client version" << std::endl << std::endl;
        std::cout << "Supported DBCs:\n";
        std::cout << "    Spell.dbc (" << SPELL_CLIENT_VERSION << ")" << std::endl;
        std::cout << "    SpellItemEnchantment.dbc (" << SPELLITEMENCH_CLIENT_VERSION << ")" << std::endl;
    }
    return 0;
}

bool LoadCheckDump(const std::string dbc_translation[][2], const int columns, const int rows, const std::string dbc_filename, const std::string sql_filename, const std::string table_name)
{
    DBCFileLoader DBCFile;
    DBCFile.Load(dbc_filename.c_str(), columns, rows);
    dump_sql(dbc_translation, &DBCFile, sql_filename, table_name);
    return true;
}

void dump_sql(const std::string dbc_translation[][2], DBCFileLoader *DBCFile,const std::string sql_filename, const std::string table_name)
{
    std::cout << sql_filename.c_str() << " - Creating file..." << std::endl;
    FILE *fSpellSql;
    fSpellSql = fopen(sql_filename.c_str(), "w");
    if(!fSpellSql)
    {
	std::cout << "Unable to open file " << sql_filename << std::endl;
        return;
    }

    std::cout << sql_filename << " - Creating the SQL table struct..." << fSpellSql  << std::endl;

    fprintf(fSpellSql, "-- DBCtoSQL v%s\n\n", DBCTOSQL_VER);
    fprintf(fSpellSql, "-- Web: %s\n\n\n", DBCTOSQL_WEB);
    fprintf(fSpellSql, "DROP TABLE IF EXISTS `%s`;\n", table_name.c_str());
    fprintf(fSpellSql, "CREATE TABLE `%s` (\n", table_name.c_str());

    for(uint16 i = 0; i < SPELL_DBC_COLUMN_NUMS; i++)
    {
        if(!strcmp(dbc_translation[i][0].c_str(), "uint32"))
            fprintf(fSpellSql, "    `%s` INT (11) UNSIGNED DEFAULT '0' NOT NULL,\n", dbc_translation[i][1].c_str());
        else if(!strcmp(dbc_translation[i][0].c_str(), "int32"))
            fprintf(fSpellSql, "    `%s` INT (11) DEFAULT '0' NOT NULL,\n", dbc_translation[i][1].c_str());
        else if(!strcmp(dbc_translation[i][0].c_str(), "float"))
            fprintf(fSpellSql, "    `%s` FLOAT DEFAULT '0' NOT NULL,\n", dbc_translation[i][1].c_str());
        else if(!strcmp(dbc_translation[i][0].c_str(), "flag96"))
            fprintf(fSpellSql, "    `%s` INT (11) UNSIGNED DEFAULT '0' NOT NULL,\n", dbc_translation[i][1].c_str());
        else if(!strcmp(dbc_translation[i][0].c_str(), "char*") | !strcmp(dbc_translation[i][0].c_str(), "char"))
            fprintf(fSpellSql, "    `%s` TEXT,\n", dbc_translation[i][1].c_str());
        else
            fprintf(fSpellSql, "    ERROR: unknown column type: %s in column: %s\n", dbc_translation[i][0].c_str(), dbc_translation[i][1].c_str());
    }

    fprintf(fSpellSql, "    PRIMARY KEY(`%s`)\n", dbc_translation[0][1].c_str());
    fprintf(fSpellSql, ") ENGINE=MyISAM DEFAULT CHARSET=utf8;\n");

    fprintf(fSpellSql, "\n\n");

    std::cout << sql_filename << " - DONE\n\n";

    // start dumping the data from the DBC

    std::cout << sql_filename << " - Dumping data...\n";

    Bar ProgressSpell(DBCFile->getNumRows());

    char tstrSpell[SLASH_BUFFER];

    for(uint32 j = 0; j < DBCFile->getNumRows(); j++)
    {
        // new insert block
        if((j % SQL_INSERTS_PER_QUERY) == 0)
        {
            fprintf(fSpellSql, "\nINSERT INTO `%s` (", table_name.c_str());
            for(uint16 i = 0; i < DBCFile->getNumFields(); i++)
            {
                fprintf(fSpellSql, "`%s`", dbc_translation[i][1].c_str());
                if(i !=  DBCFile->getNumFields() - 1)
                    fprintf(fSpellSql, ",");
            }
            fprintf(fSpellSql, ") VALUES \n");
            fprintf(fSpellSql, "(");
        }
        else
            fprintf(fSpellSql, ",(");

        for(uint16 i = 0; i <  DBCFile->getNumFields(); i++)
        {
            if(!strcmp(dbc_translation[i][0].c_str(), "uint32"))
                fprintf(fSpellSql, "%lu", DBCFile->getRecord(j).getUInt32(i));
            else if(!strcmp(dbc_translation[i][0].c_str(), "int32"))
                fprintf(fSpellSql, "%ld", DBCFile->getRecord(j).getInt32(i));
            else if(!strcmp(dbc_translation[i][0].c_str(), "float"))
                fprintf(fSpellSql, "%f", DBCFile->getRecord(j).getFloat(i));
            else if(!strcmp(dbc_translation[i][0].c_str(), "flag96"))
                fprintf(fSpellSql, "%lu", DBCFile->getRecord(j).getUInt32(i));
            else if(!strcmp(dbc_translation[i][0].c_str(), "char*"))
            {
                const char *dstr = DBCFile->getRecord(j).getString(i);
                uint16 otherindex = 0;
                for(uint16 k = 0; k <= strlen(dstr); k++)
                {
                    if(dstr[k] == '\'' || dstr[k] == '"')
                    {
                        tstrSpell[otherindex++] = '\\';
                        tstrSpell[otherindex++] = dstr[k];
                    }
                    else
                        tstrSpell[otherindex++] = dstr[k];
                }
                fprintf(fSpellSql, "\"%s\"", tstrSpell);
            }

            if(i != DBCFile->getNumFields() - 1)
                fprintf(fSpellSql, ",");
        }

        // end of insert block
        if((( j + 1) % SQL_INSERTS_PER_QUERY) == 0)
            fprintf(fSpellSql, ");\n");
        else if(j == DBCFile->getNumRows() - 1)
            fprintf(fSpellSql, ");\n");
        else
            fprintf(fSpellSql, ")\n");

        ProgressSpell.Step();
    }

    std::cout << std::endl << sql_filename << " - DONE\n\n";

    fprintf(fSpellSql, "\n");
    fprintf(fSpellSql, "-- EOF\n");
    fflush(fSpellSql);
    fclose(fSpellSql);

    std::cout << sql_filename << " - Closed\n\n";
}
